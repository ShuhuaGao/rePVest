# This file contains the two PV cell models (SDM and DDM)
# and functions to compute the SSE as well as the RMSE.


const k = 1.3806503e-23     # Boltamann constant
const q = 1.60217646e-19    # electron charge 

"""
    Single diode model with five parameters
	
V, I are the input voltage and current.

Ir:  photocurrent generated by the solar cell (A)
I0: the reverse saturation current of the diode (μA)
n: diode ideality factor
Rs: series resistance (Ω)
Rp: parallel resistance (Ω)
"""
function model_sdm(V, I, Iph, I0, n, Rs, Rp, T)
    tmp = V+ I*Rs
    return Iph - I0*1e-6*(exp(q*tmp/(n*k*T)) - 1) - tmp/Rp
end


"""
    Double diode model with seven parameters

V, I are the input voltage and current.

Iph:  photocurrent generated by the solar cell (A)
I01, I02: the reverse saturation current of the diode (μA)
n1, n2: diode ideality factor
Rs: series resistance (Ω)
Rp: parallel resistance (Ω)
"""
function model_ddm(V, I, Iph, I01, I02, n1, n2, Rs, Rp, T)
    tmp = V+ I*Rs
    c = k*T/q
    return Iph - I01*1e-6*(exp(tmp/(n1*c)) - 1) - I02*1e-6*(exp(tmp/(n2*c)) - 1) - tmp/Rp
end


"""
	Compute the sum of squared error (SSE)
	
data: a matrix of V-I data, each row denoting a (V, I) point
model: a function for the SDM or the DDM, whose input is (V, I) and output is the estimated current
"""
function calculate_sse(data, model::Function)
    sse = 0.0
    for (Vm, Im) in eachrow(data)
        Ic = model(Vm, Im)
        sse += (Im - Ic)^2
    end
    return sse
end


"""
	Compute the root mean square error (RMSE)
	
data: a matrix of V-I data, each row denoting a (V, I) point
model: a function for the SDM or the DDM, whose input is (V, I) and output is the estimated current
"""
function calculate_rmse(data, model::Function)
    sse = calculate_sse(data, model)
    return sqrt(sse / size(data, 1))
end

"""
    Compute the root mean square error (RMSE)

data: a matrix of V-I data
θ: parameter vector. Depending on the length of θ, either SDM or DDM will be used.
T: temperature in Calvin (K)
"""
function calculate_rmse(data, θ, T)
    model = length(θ) == 5 ? model_sdm : model_ddm
    return calculate_rmse(data, (V, I)->model(V, I, θ..., T))
end


"""
	Compute the mean bias error (MBE)
	
data: a matrix of V-I data, each row denoting a (V, I) point
model: a function for the SDM or the DDM, whose input is (V, I) and output is the estimated current
"""
function calculate_mbe(data, model::Function)
    mbe = 0.0
    for (Vm, Im) in eachrow(data)
        Ic = model(Vm, Im)
        mbe += (Im - Ic)
    end
    return mbe / size(data, 1)
end


"""
	Compute the mean absolute percentage error (MAPE). 

See https://en.wikipedia.org/wiki/Mean_absolute_percentage_error for a definition.
	
data: a matrix of V-I data, each row denoting a (V, I) point
model: a function for the SDM or the DDM, whose input is (V, I) and output is the estimated current
"""
function calculate_mape(data, model::Function)
    mape = 0.0
    for (Vm, Im) in eachrow(data)
        Ic = model(Vm, Im)
        d = abs((Im - Ic) / Im)
        # @show d
        mape += d
    end
    return mape / size(data, 1) * 100
end

"""
	Compute the mean absolute error (MAE)
	
data: a matrix of V-I data, each row denoting a (V, I) point
model: a function for the SDM or the DDM, whose input is (V, I) and output is the estimated current
"""
function calculate_mae(data, model::Function)
    mae = 0.0
    for (Vm, Im) in eachrow(data)
        Ic = model(Vm, Im)
        mae += abs(Im - Ic)
    end
    return mae / size(data, 1)
end